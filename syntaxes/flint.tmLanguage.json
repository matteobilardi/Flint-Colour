{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Flint",
	"patterns": [
		{
			"include": "#addressLiteral"
		},
		{
			"include": "#controlKeywords"
		},
		{
			"include": "#integer"
		},
		{
			"include": "#float"
		},
		{
			"include": "#boolean"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#numericOperator"
		},
		{
			"include": "#logicalOperator"
		},
		{
			"include": "#assignmentOperator"
		},
		{
			"include": "#inoutOperator"
		},
		{
			"include": "#self"
		},
		{
			"include" : "#attribute"
		},
		{
			"include": "#functionCall"
		},
		{
			"include": "#functionDefinition"
		},
		{
			"include" : "#declarationKeywords"
		},
		{
			"include" : "#mutatingModifier"
		},
		{
			"include" : "#verifier"
		},
		{
			"include" : "#types"
		},
		{
			"include" : "#modifiers"
		},
		{
			"include" : "#string"
		},
		{
			"include" : "#accessor"
		},
		{
			"include" : "#colon"
		},
		{
			"include" : "#payable"
		}
	],
	"repository": {
		"controlKeywords": {
			"patterns": [{
				"name": "keyword.control.flint",
				"match": "\\b(if|else|while|for|return|become|struct|external|trait|as|call|in)\\b"
			}]
		},
		"integer": {
			"patterns": [{
				"name": "constant.numeric.integer.flint",
				"match": "\\d+"
			}]
		},
		"float": {
			"patterns": [{
				"name": "constant.numeric.float.flint",
				"match": "\\d+\\.\\d+"
			}]
		},
		"boolean":{
			"patterns": [{
				"name": "constant.language",
				"match": "\\b(true|false)\\b"
			}]
		},
		"addressLiteral":{
			"patterns": [{
				"name": "constant.numeric.hex",
				"match": "0x([A-F0-9a-f])+"
			}]
		},
		"numericOperator":{
			"patterns": [{
				"name": "keyword.operator.arithmetic.flint",
				"match": "(\\+|\\-|\\*|\\/|\\*\\*|&\\*|&-|&\\+)"
			}]
		},
		"inoutOperator":{
			"patterns": [{
				"name": "keyword.operator.inout.flint",
				"match": "(&)"
			}]
		},
		"logicalOperator":{
			"patterns": [{
				"name": "keyword.operator.logical.flint",
				"match": "(\\|\\||&&|!|>|<|>=|<=|==)"
			}]
		},
		"assignmentOperator":{
			"patterns": [{
				"name": "keyword.operator.assignment.flint",
				"match": "(\\+=|=|-=|\\*=|\\/=|!=|@)"
			}]
		},
		"self":{
			"patterns": [{
				"name": "variable.language.flint",
				"match": "self"
			}]
		},
		"declarationKeywords":{
			"patterns": [{
				"name": "storage.type.flint",
				"match": "\\b(let|var|event|contract|enum|any)\\b"
			}]
		},
		"types":{
			"patterns": [{
				"name": "entity.name.type.external.flint",
				"match": "\\b(uint64|address|bool|bytes32|uint256)\\b"
			}, {
				"name": "entity.name.type.flint",
				"match": "\\b(_*[A-Z][A-Za-z_$0-9]*)\\b"
			}]
		},
		"modifiers":{
			"patterns": [{
				"name": "storage.modifier.flint",
				"match": "\\b(visible|public)\\b"
			}]
		},
		"verifier":{
			"patterns": [{
				"name": "keyword.operator.verifier.flint",
				"match": "\\b(pre|post|invariant|assert)\\b"
			}]
		},
		"mutatingModifier":{
			"patterns": [{
				"name": "storage.modifier.mutating.flint",
				"match": "\\bmutates\\b"
			}]
		},
		"accessor":{
			"patterns": [{
				"name": "punctuation.accessor",
				"match": "\\."
			}]
		},
		"string":{
			"patterns": [{
				"name": "string.flint",
				"begin": "\"",
				"end": "\"",
				"beginCaptures": {"0": {"name":"punctuation.definition.string.begin"}},
				"endCaptures": {"0": {"name":"punctuation.definition.string.end"}},
				"patterns": [{
					"name":"string",
					"match": "\\w+"
				}]
			}]
		},
		"payable": {
			"patterns": [{
                "match": "payable",
				"name": "entity.name.function"
				}]
		},
		"functionCall": {
			"patterns": [
                {
                    "match": "([a-z_][a-zA-Z0-9:_$]*)\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function"
                        }
                    }
				}
			]
		},
		"functionDefinition": {
			"patterns": [
                {
                    "match": "(func) ([a-zA-Z_][a-zA-Z0-9:_$]*)\\s*\\((?:(?:\\s*(implicit\\s+)??([a-zA-Z_][a-zA-Z0-9_]*):\\s*(inout\\s+)?([^,]*?),)*?(?:\\s*(implicit\\s+)??([a-zA-Z_][a-zA-Z0-9_]*):\\s*(inout\\s+)?([^,]*?),)?\\s*(implicit\\s+)??([a-zA-Z_][a-zA-Z0-9_]*):\\s*(inout\\s+)?([^,]*?)|\\s*)\\)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.function.flint"
                        },
                        "2": {
                            "name": "entity.name.function"
                        },
                        "3": {
                            "name": "keyword.control.flint"
                        },
                        "4": {
                            "name": "variable.parameter"
                        },
                        "5": {
                            "name": "keyword.control.flint"
                        },
                        "6": {
                            "name": "entity.name.type"
                        },
                        "7": {
                            "name": "keyword.control.flint"
                        },
                        "8": {
                            "name": "variable.parameter"
                        },
                        "9": {
                            "name": "keyword.control.flint"
                        },
                        "10": {
                            "name": "entity.name.type"
                        },
                        "11": {
                            "name": "keyword.control.flint"
                        },
                        "12": {
                            "name": "variable.parameter"
                        },
                        "13": {
                            "name": "keyword.control.flint"
                        },
                        "14": {
                            "name": "entity.name.type"
                        }
                    }
				}
			]
		},
		"comment":
		{
			"patterns": [{
				"name": "comment.line.double-slash",
				"match": "//.*"
			}]
		}
	},
	"scopeName": "source.flint"
}
